import { useEffect, useState } from 'react';
import { PieChart, Pie, Cell, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import './index.css';

const COLORS = ['#f97316', '#3b82f6', '#10b981'];

function App() {
  const [showInfo, setShowInfo] = useState(false);
  const [dominanceData, setDominanceData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [lastUpdate, setLastUpdate] = useState(null);
  const [quizActive, setQuizActive] = useState(false);
  const [quizAnswered, setQuizAnswered] = useState(false);
  const [quizResult, setQuizResult] = useState(null);
  const [currentQuestion, setCurrentQuestion] = useState(0);

  const quizQuestions = [
    {
      question: "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —Ä–æ—Å—Ç –¥–æ–º–∏–Ω–∞—Ü–∏–∏ BTC?",
      answers: [
        { text: "–í—ã—Ö–æ–¥ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ –∏–∑ —Ä–∏—Å–∫–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–æ–≤", correct: true },
        { text: "–†–æ—Å—Ç –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ –º–µ–º-–∫–æ–∏–Ω–∞–º", correct: false },
        { text: "–°–Ω–∏–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ë–∏—Ç–∫–æ–∏–Ω–∞", correct: false }
      ]
    },
    {
      question: "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —Ä–æ—Å—Ç –¥–æ–º–∏–Ω–∞—Ü–∏–∏ ETH?",
      answers: [
        { text: "–†–æ—Å—Ç –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º (dApps)", correct: true },
        { text: "–†–æ—Å—Ç –≤–ª–æ–∂–µ–Ω–∏–π –≤ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã", correct: false },
        { text: "–ü–µ—Ä–µ—Ö–æ–¥ —Ä—ã–Ω–∫–∞ –≤ —Ñ–∞–∑—É —Å—Ç—Ä–∞—Ö–∞", correct: false }
      ]
    },
    {
      question: "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —Ä–æ—Å—Ç –¥–æ–º–∏–Ω–∞—Ü–∏–∏ USDT?",
      answers: [
        { text: "–£—Ö–æ–¥ –∫–∞–ø–∏—Ç–∞–ª–∞ –≤ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤—ã", correct: true },
        { text: "–†–æ—Å—Ç —Å–ø—Ä–æ—Å–∞ –Ω–∞ –Ω–æ–≤—ã–µ –∞–ª—å—Ç–∫–æ–∏–Ω—ã", correct: false },
        { text: "–ü–µ—Ä–µ—Ö–æ–¥ —Ä—ã–Ω–∫–∞ –∫ –±—ã—á—å–µ–º—É —Ç—Ä–µ–Ω–¥—É", correct: false }
      ]
    }
  ];

  const fetchDominance = async () => {
    try {
      const res = await fetch('https://api.coingecko.com/api/v3/global');
      const json = await res.json();
      const data = json.data.market_cap_percentage;
      const keysToShow = ['btc', 'eth', 'usdt'];
      const chartData = keysToShow.map((key) => ({
        name: key.toUpperCase(),
        value: data[key]
      }));
      setDominanceData(chartData);
      setLastUpdate(new Date().toLocaleTimeString());
      setLoading(false);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', err);
    }
  };

  const handleAnswer = (isCorrect) => {
    setQuizAnswered(true);
    setQuizResult(isCorrect);
  };

  useEffect(() => {
    fetchDominance();
    const interval = setInterval(fetchDominance, 30000);
    return () => clearInterval(interval);
  }, []);

  return (
    <div className="min-h-screen text-white flex flex-col items-center justify-center p-4 animate-fade">
      <div className="bg-gray-800 shadow-xl rounded-2xl p-6 max-w-md w-full">
        <h1 className="text-3xl font-bold text-center mb-4">üìä Crypto Dominance</h1>
        <p className="text-gray-400 text-center mb-2">–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥</p>

        {loading ? (
          <div className="text-center py-10">‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...</div>
        ) : (
          <>
            <ul className="mb-4 text-center space-y-1">
              {dominanceData.map((item) => (
                <li key={item.name}>
                  <span className="font-semibold">{item.name}</span>: {item.value.toFixed(2)}%
                </li>
              ))}
            </ul>

            <div className="h-72">
              <ResponsiveContainer>
                <PieChart>
                  <Pie
                    data={dominanceData}
                    dataKey="value"
                    nameKey="name"
                    cx="50%"
                    cy="50%"
                    outerRadius={100}
                    fill="#8884d8"
                    label={({ name, value }) => `${value.toFixed(2)}%`}
                  >
                    {dominanceData.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                    ))}
                  </Pie>
                  <Tooltip formatter={(v) => `${v.toFixed(2)}%`} />
                  <Legend />
                </PieChart>
              </ResponsiveContainer>
            </div>

            <p className="text-gray-500 text-sm mt-4 text-center">
              –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {lastUpdate}
            </p>

            <button
              onClick={() => setQuizActive(true)}
              className="mt-4 bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded"
            >
              –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç
            </button>

            <button
              onClick={() => setShowInfo(true)}
              className="mt-4 bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
            >
              –ß—Ç–æ —Ç–∞–∫–æ–µ –¥–æ–º–∏–Ω–∞—Ü–∏—è?
            </button>

            {showInfo && (
              <div className="bg-gray-700 mt-4 p-4 rounded-lg text-sm text-gray-300">
                <h2 className="font-bold text-lg mb-2 text-center">–ß—Ç–æ —Ç–∞–∫–æ–µ –¥–æ–º–∏–Ω–∞—Ü–∏—è?</h2>
                <p>–î–æ–º–∏–Ω–∞—Ü–∏—è ‚Äî —ç—Ç–æ –¥–æ–ª—è –∞–∫—Ç–∏–≤–∞ –≤ –æ–±—â–µ–π –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞.</p>
                <p>–ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã—Å–æ–∫–∞—è –¥–æ–º–∏–Ω–∞—Ü–∏—è BTC –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–æ–º, —á—Ç–æ —Ä—ã–Ω–æ–∫ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å.</p>
                <p>–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –¥–æ–º–∏–Ω–∞—Ü–∏—é, —á—Ç–æ–±—ã –ø–æ–Ω–∏–º–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤.</p>
                <button
                  onClick={() => setShowInfo(false)}
                  className="mt-4 bg-red-600 hover:bg-red-700 text-white font-bold py-1 px-3 rounded block mx-auto"
                >
                  –ó–∞–∫—Ä—ã—Ç—å
                </button>
              </div>
            )}

            {quizActive && (
              <div className="bg-gray-700 mt-6 p-4 rounded-lg text-sm text-gray-300">
                {!quizAnswered ? (
                  <>
                    <h2 className="font-bold text-lg mb-4 text-center">{quizQuestions[currentQuestion].question}</h2>
                    <div className="space-y-2">
                      {quizQuestions[currentQuestion].answers.map((answer, index) => (
                        <button
                          key={index}
                          onClick={() => handleAnswer(answer.correct)}
                          className="block w-full bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded"
                        >
                          {answer.text}
                        </button>
                      ))}
                    </div>
                  </>
                ) : (
                  <>
                    <h2 className={`font-bold text-lg mb-2 text-center ${quizResult ? 'text-green-400' : 'text-red-400'}`}>
                      {quizResult ? '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!' : '‚ùå –ù–µ–≤–µ—Ä–Ω–æ'}
                    </h2>
                    <p className="text-center mb-4">
                      {quizResult ? "–û—Ç–ª–∏—á–Ω–æ!" : "–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –ø—Ä–æ–¥–æ–ª–∂–∞–π —É—á–∏—Ç—å—Å—è!"}
                    </p>
                    {currentQuestion < quizQuestions.length - 1 ? (
                      <button
                        onClick={() => {
                          setQuizAnswered(false);
                          setCurrentQuestion(currentQuestion + 1);
                        }}
                        className="block bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded mx-auto"
                      >
                        –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
                      </button>
                    ) : (
                      <button
                        onClick={() => {
                          setQuizActive(false);
                          setQuizAnswered(false);
                          setCurrentQuestion(0);
                        }}
                        className="block bg-gray-600 hover:bg-gray-700 text-white py-2 px-4 rounded mx-auto"
                      >
                        –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç
                      </button>
                    )}
                  </>
                )}
              </div>
            )}
          </>
        )}
      </div>
    </div>
  );
}

export default App;
